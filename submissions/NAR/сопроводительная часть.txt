Основные тезисы:
Цель конкурса выявить наиболее быстрый алгоритм для этого надо использовать группирования в структурах и менее затратные (по времени) алгоритмы.
Входные данные - среднестатистический ящик, что означает что большинство всех писем с одинаковым полем TO прилично писем от одних и тех же сервисов (общее доменное имя ящика отправителя)
Данные для тестов указанные в статье на хабре не релевантны, там все 100тысяч писем чистый рандом и самый быстрый способ разобраться с рандомной кучей - это обычный перебор без группирований.
Оптимизации в решении настроены на вышеописанный среднестатистический ящик, тесты производились на 100.000 сообщений и 1000 правил из которых 157 подходят ко всем сообщениям.

Оптимизации:
1) Обьект сообщений пересобирается в новую структуру вида
	to-
		fromDomain-
					-from
						-msgN... (messages)
	Вышеописанная структура это сгрупированный по наиболее общим параметрам обьект для уменьшения общего числа итераций необходимых для получения результата.
	
	Грппирования по признаку fromDomain т.е. доменному имени службы (gmail.com, mail.ru...), способно сильно ускорить процесс получения результата 
	т.к. уже до перебора большого числа писем можно понять какие маски подходят какие нет. Остается вопрос проверки доменного имени исходя из маски на полное письмо(пункт 3)
2) Массив правил, дополняется новыми данными в зависимости от того на какие поля идут маски, и идут ли вообще:
	from - регулярное выражение на поле from
	to - регулярное выражение на поле to
	cleanFrom - исходное значение поля from (нужен для checkDomainPartInFormField)
	needCheck - нужна ли проверка	
	funcTo - функция проверки поля To
	funcFrom - функция проверки поля From
	
	В зависимости о входных данных некоторые поля есть или их нет, функции проверок сразу задаются чтобы уменьшить время на генерацию регулярных выражений и проверок по 2-м или только 1 полю
	Правила подходящие всем(тяжеловесные правила) не проходят проверку и имеют needCheck = 0 (подробнее 4)
3) Реализована функция (checkDomainPartInFormField) для проверки доменного имени у поля from исходя из полного правила на поле from из правила, постараслся учесть все возможные вариации включая вариант когда много символов @.
4) Если у правила needCheck = 0 то можно не проверять правила, а автоматически присвоить всем сообщениям этот экшен, пример таких правил это to=* или пусто И from=* или пусто.
5) Вспомогательные переменные
alreadyCheckedFromDomainByRule = [];
alreadyCheckedToByRule = [];
на каждое правило, а цикл проверки начинается с перебора правил, собирается 2 массива с уже проверенными данными по полю To и по доменному имени от поля From, чтобы не проверять уже проверенные вариации, 
очистка производится на новом правиле чтобы не сильно перегружать память.
6) По скольку последовательный сбор правильного выходного формата занимает много времени, особенно если попадается правила которое удовлетворяет всем сообщениям, коих 100.000 допустим, стала необходимость ускорить процесс путем сбора сначала в несортированную структуру, 
а потом в ф-ии prepareReturnResult получить нужную.
7) Ниже листинг с таймингами.

Результаты тестирования:
Тестовый файл test_100000.json (100000 данные и 1000 правил из которых 157 подходят всем)
поптка 1
start
prepare rules time: 0.018
prepare msg time: 1.937
filtr time: 1.147
prepare result 0.289
time: 3.888

поптка 2
start
prepare rules time: 0.018
prepare msg time: 1.622
filtr time: 0.985
rules for all messages cnt : 157
prepare result 0.285
time: 3.331

поптка 3
start
prepare rules time: 0.018
prepare msg time: 1.613
filtr time: 1.021
rules for all messages cnt : 157
prepare result 0.325
time: 3.406

Тестовый файл test_50000.json (50000 данные и 1000 правил из которых 163 подходят всем)
поптка 1
start
prepare rules time: 0.017
prepare msg time: 0.706
filtr time: 0.785
rules for all messages cnt : 163
prepare result 0.125
time: 1.844

поптка 2
start
prepare rules time: 0.018
prepare msg time: 0.716
filtr time: 0.767
rules for all messages cnt : 163
prepare result 0.125
time: 1.84

поптка 3
start
prepare rules time: 0.018
prepare msg time: 0.706
filtr time: 0.785
rules for all messages cnt : 163
prepare result 0.133
time: 1.853


Немного об опыте.
С JS в более менее постоянном режиме работаю около года, с node JS не работал вообще. На рынке с 2001 года как бэкенд разработчик.
Очень большая просьба сообщить, если не получиться запустить.